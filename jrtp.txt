JRTP-NOTES
============
	
=========================================
Software Development Life Cycle (SDLC)
=========================================

=> From start to end is called as Life Cycle

=> SDLC = Development + Testing + Deployment + Delivery 

=> From project start to till project end is called as Software development lifecycle.

=> We have several phases in SDLC


1) Requirements Gathering

2) Requirements Analysis

3) Design (FDD / BRD / SRS )

4) Development

5) Testing

6) Deployment

7) Delivery

8) Support (SLA - Service Line Agreement ) - 6 months

====================
SDLC Methodologies
====================

1) Waterfall (outdated)

2) Agile (Most Trending)

=======================
Waterfall methodology
=======================

-> Linear methodology (Sequential Process)

-> It is a step by step process

-> After one step is completed then only we will move to next step

-> Forward Direction

-> Client involvement is very less

-> Client will see project at the end 

-> Requirements fixed & budget fixed


==================
Agile Methodology
==================

-> Iterative approach

-> Development + Testing + Delivery - is a cyclic process

-> Project will be delivered in multiple phases (Sprint)

-> Client Involvement will be there in every phase of the project

-> Requirements are not fixed & Budget is not fixed

Note: Client Satisfaction is most important factor in Agile Methodology

==================
Agile Terminology
==================

Product Owner : Responsible to deliver project to client (delivery head)

Scrum Master : Responsible to manage Agile Team work (Daily Tracking)

Tech Lead : Senior Resource in Team For Technical help

Team Members :  Developers + Testers + DB Team + Ops Team

Scrum Meeting : Daily status call ( scrum / status / standup ) - 30 mins

Backlog Grooming Meeting : Meeting To identify pending works in the project

Backlog Stories : Pending Stories we have created in JIRA

Story : A task

Story Points : Represents duration to complete a story

				3 points  - 1 day

				5 Points  - 2 days

				8 Points  - 3 days

Sprint Planning Meeting: To identify priority stories to complete

Sprint : Set of stories planned to complete in given duration (2 weeks)

RetroSpective meeting : Review meeting

			1) What went well
			2) What went wrong
			3) Improvements		
			4) Lessons Learnt	
			5) Ideaz Board

-----------------Status Sending in Email Format --------------------

To : scrummaster-mail-id
cc : sbiproject@tcs.com

Subject : Standup Call Status - Ashok

Hi Steve,

Today i can't join our standup call due to doctor appointment.

Please find my status below

yesterday : FP-1 completed, status changed to DONE.

today : I have started working on FP-2, targeted for Tomorrow EOD.

I don't have any issues.

Thanks,
Ashok.

------------- Email Request For DevOps team  --------------------------

To : sbidevops@tcs.com

cc: sbiproject@tcs.com

Subject : New Git Repo creation Request | FP-1

Hi,

Please create new git repo for our admin API development

Repo Name : admin_API_REPO

@Manager - Please approve.

Thanks,
Ashok.

----------------------------------------------------------------------------

To : devops@oracle.com

cc: flipkartproject@orcle.com

Subject : Jenkins Pipeline Creation Request | FP-2

Body:

Hi DevOps Team,

Please create Jenkins Pipeline for Admin API deployment in below Environments.

1) DEV
2) QA
3) UAT

GIT Repo : <url>

@Manager : Please approve

Thanks,
Ashok.

-------------------------------------------------------------------------
======
JIRA
======

-> JIRA software developed by Atlassian company

-> JIRA is used for Project management.

-> JIRA is also used for Bug reporting.

-> Project Task assignment will happen in JIRA s/w only

Note: JIRA is a paid software. We can use trial version of JIRA.

URL to Downloading : https://start.atlassian.com/

1) What is SDLC ?
2) What are SDLC phases ?
3) Waterfall Methodology
4) Agile Methodology
5) Agile Terminology
6) What is JIRA ?
7) What is Backlog ?
8) Who will create Story in Backlog ?
9) What is Story Point ?
10) How to create Sprint ?
11) Task Assignment in JIRA 
12) Task Status Change in JIRA
13) How to Create Bug in JIRA ?

=====================================================
Which Ticketing Tool you are using in your project ?
=====================================================

-> "Service Now" we are using as ticketing tool.

-> To send software installations requests to IT team we will create tickets using Ticketing Tool.


=================================================================================================================

===============
GIT / HITHUB
===============


To commit only the modified files (and not the newly created/untracked files) to your Git repository, you can do the following:

git status

You can add modified files individually using:
git add <modified-file1> <modified-file2>

Or you can use the shorthand to add only modified (tracked) files:
git add -u (or ) git add --update

Commit the changes:
git commit -m "Commit message for modified files only"



ðŸ’¡ Summary:
If you want to commit only modified (not new) files:

git add -u
git commit -m "Modified files only"

-----------------------
To discard the changes in unstagged file
git restore <file-name>

To unstage the stagged file
git restore --stagged <file-name>

	
To check working tree pointing to which branch
$ git branch

To switch to particular branch
$ git checkout <branch_name>

We can merge changes from one branch to another branch using pull request


$ git clone <url>  ==> will clone default branch

To clone project directly to the develop branch not from main branch 
while develop branch is created from main branch

git clone -b develop http://github.com/maneit/my_project.git

To save our task in temporary space to complete another high priority task
$git stash
// Complete high priority task

To get back our pending work
$git stash apply

// Interview questions
1) git clone vs git pull
2) git push vs git pull
3) git stash & git stash apply
4) git fetch vs git pull
	-> pull download the remote repo changes to the working directory directly
	-> fetch will first check that are there any changes in the remote repo if yes and then download these to the local repository but not the working directory, to get these changes to the working directory then should pull again

5) git merge vs git rebase

	-> merge will preserve commit history but rebase will not

To merge one branch changes to another branch
$ git merge develop (you should be present on the main branch)

Git merge :
	ways    1) pull request
		2) git merge
		3) git rebase 

------------------------------------------------------------------------------

fatal: detected dubious ownership in repository at 'D:/My_Project_Work/temple_project'
'D:/My_Project_Work/temple_project' is owned by:
        (inconvertible) (S-1-5-21-2171225936-1719943459-4148662676-1001)
but the current user is:
        DESKTOP-6948TP4/Mangesh (S-1-5-21-3442121798-3682177877-4187866295-1002)
To add an exception for this directory, call:

        git config --global --add safe.directory D:/My_Project_Work/temple_project

=>Create a new branch and stay on the current branch
git branch <new-branch-name>

=>Create a new branch and immediately switch to it: 
$ git checkout -b <new-branch-name>


=> (use "git rm --cached <file>..." to unstage)

=> You need to pull the changes from the remote first, merge (or rebase) them with your local changes, and then push.

$ git pull origin main --rebase
$ git push -u origin main

=====================================================================
Logging 
========================

-> The process of storing application execution details to a file is called as logging
-> With log messages we can understand execution flow of the application
-> we can understand exceptions occurring in the project by seeing log messages

Logging frameworks
--------------------
1) Log4J
2) Log4J2
3) LogBack
4) LogStash

Log Monitoring tools
----------------------

1) Putty
2) WinSCP
3) ELK
4) Splunk (Licensed)


Logging Architecture 
----------------------

1) Logger : This class providing method to generate log messages 
2) Layout : It represents log messages structure (format of log message)
3) Appender : It is used to write log message to destination
4)  Destination : It can be console/file/database

Note : We will use files to store our log messages

To save log details in a file

	-> logging.file.name = app.log

Logging level hierarchy

Trace >> debug >> info >> warn >> error >> fatal

In spring boot by Default it will use level as INFO
In spring boot by Default it will use ConsoleAppender
To generate log messages in log file we have to set below property in 
application.properties file

 logging.file.name = app.log
 
----------------------------------

Rolling Appenders
======================

1) Size based Rolling -> Log files saved based on size
2) Time based Rolling -> Log files saved based on time period

To customize springboot application log configuration by creating 
logback.xml file under src/main/resources folder



To change the log level 
	-> logging.level.root = DEBUG
	hence from here all levels get printed

-> When we set one log level, application will print log messages from that level to all higher level messages.
-------------------------------------------------------------------------

==================
Log Monitoring
===================

-> It is the process of checking logs of application to understand problems occurring in the application
we have several tools to perform log monitoring

1) Putty
2) WinSCP
3) ELK
4) Splunk

============
Putty
=============

-> Putty is a CLI based Software
-> Used to connect from windows to Linux machine.
-> To connect to Linux machine we need machine details
	IP : 192.168.1.2
	username : loguser
	password : log@123

Putty commands 
---------------

cat filename  :  To get file data from top to bottom

head filename : To get first 10 lines of file

tail filename : To get last 10 lines of file 

grep 'Exception' filename : It will print the lines which contains Exception 

=======
WinScp 
=======

-> GUI based software
-> Used to connect from windows to Linux machines 
-> Using this WinSCP we can upload and download files from windows to Linux and vice versa

==========
Splunk
==========
-> GUI Based paid software 

======
ELK
======

E : Elastic Search
L : Log Stash
K : Kibana

The above 3 open source products are used for log monitoring

==================================================================

===============
Mini Project 
===============

Step-1) Will provide requirement
Step-2) Need to understand the requirement and come up with the questions (Query log)
Step-3) I will give clarifications for the questions
Step-4) DB Analysis (Tables, Columns)
Step-5) Java Components Analysis (Interfaces, Classes, Methods)
Step-6) I will explain my analysis
Step-7) Compare your analysis and my analysis
Step-8) will explain coding in live class

--------------
Mini Project-1  => Reports Application
--------------

Application Name : Insurance Report Generation

Plan Name : Cash / Food / Medical / Employment
Plan Status : Approved / Denied / Terminated
Gender : Male / Female
From Date :
To Date : 

Note : Insert 20 records in DB table manually with given permutations and combinations

-> Plan name dropdown values should come from database table
-> plan status drop down values should come from database 
-> 1) It is a dynamic search functionality. Based on search criteria we need to fetch records from Database and display in UI
2) When user click on 'Search' Without selecting any filter then we need to fetch all records from table and display in UI.
3) When user click on 'Excel' then complete Database table data should be exported to excel file and send that excel file as an attachment to your email id.
4) When user click on 'PDF' then complete Database table data should be exported to PDF file and send that PDF file as an attachment to your email id.

DB Table : CITIZEN_PLANS_INFO
---------------------------------
CITIZEN_ID 		NUMBER PRIMARY KEY
CITIZEN_NAME 		VARCHAR
GENDER	 		VARCHAR
PLAN_NAME 		VARCHAR
PLAN_STATUS 		VARCHAR
CITIZEN_START_DATE 	DATE
CITIZEN_END_DATE 	DATE
BENEFIT_AMOUNT		NUMBER
DENIAL_REASON		VARCHAR
TERMINATION_REASON	VARCHAR
TERMINATION_DATE	DATE

--------------------
Java Components
--------------------

Persistence Layer :
	1) CitizenPlan.java (Entity Class)         
	2) CitizenPlanRepository.java (Interface)

Service Layer :
	3) ReportService.java (interface) -> Service always created as an interface
		1) method to get plan-name drop down data
		2) method to get plan-status drop down data
		3) method to handle search functionality
		4) method to export data to excel file
		5) method to export data to pdf file
	4) ReportServiceImpl.java (Class)
	5) PdfGenerator.java (class)
	6) ExcelGenerator.java (class)
	7) EmailUtils.java (class)

Controller Layer :
	8) ReportController.java (class)
	9) SearchRequest.java (class) (Form binding class/ command/ DTO)
	10) DataLoader.java (runner class)

Presentation Layer:
	11) index.jsp


=================
Project Setup
=================

	1) Create starter project with required dependencies
	2) Configure data source & view resolver in .properties file
	3) Create entity class and repository interface 
	4) Create runner to load data into Db table
	5) Create form binding class
	6) Create service Interface with abstract methods
	7) Create serviceImpl class 
	8) Create Controller class 
	9) Create view page and & add bootstrap css & js 
	10) Run the application and access the welcome page
	11) Create a git repo and Push project into Git repo

